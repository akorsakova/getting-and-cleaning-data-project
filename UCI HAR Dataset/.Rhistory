find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
exit
install.packages("KernSmooth")
library(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq -> seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2),each=10)
exit
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- 1:5
x
makevector(x)
makeVector(x)
funcion() 1:3
function() x
get <- function() x
get
?<<-
help ("<<-")
corr(x)
x
setmean <- function(mean) m
setmean
setmean(x)
makevector(x)
makeVector(x)
debug(makeVector)
makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <- y
m <- NULL
}
get <- function() x
setmean <- function(mean) m <- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(x)
makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- makeVector(1:3)
x
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x$getmean()
x$get()
mean(x$get())
cachemean(x)
cachemean(x)
cachemean(makeVector(1:7))
cachemean(makeVector(1:7))
cachemean(makeVector(1:7))
cachemean(makeVector(1:7))
cachemean(x)
m <- makeVector(1:7)
cachemean(m)
cachemean(m)
cachemean(x)
set.seed(1)
rpois(5, 2)
str(rpois(5,2))
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y
x1 < 1
x1 <- 1
x2 <- 2
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- 1:10
x2 <- 11:20
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total
rprof(by.total)
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(c, my_data)
colnames?
"patient", "age", "weight", "bp", "rating", "test".
?colnames
colnames(my_data) <- cnames
my_data
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count)
)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(XML)
library(httr)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
file <- 'dataset.zip'
download(url,file)
unzip(file)
print("Dataset downloaded. Please, proceed with run.analysis()")
install.packages("downloader")
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
> file <- 'dataset.zip'
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
file <- 'dataset.zip'
download(url,file)
rm file
rm url
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
#set workking directory and download data
setwd("~/DataScienceCertificiation/getting-and-cleaning-data-project")
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", "projectdata.zip",  mode = "wb")
#unzip file
#unzip("projectdata.zip")
#change directory to where data resides
setwd("~/DataScienceCertificiation/getting-and-cleaning-data-project/UCI HAR Dataset")
#read in necessary data from the dataset
features <- read.table("features.txt")
X_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
X_test <- read.table('test/X_test.txt')
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
activity_labels<-read.table("activity_labels.txt")
subject_train <- read.table("train/subject_train.txt")
#start merging the datasets to make it easier to eventually create one dataset
merged_x <- rbind(X_train, X_test)
merged_y <- rbind(y_train, y_test)
merged_subject <- rbind(subject_train, subject_test)
#assign meaningful names to each variable in the dataset
names(merged_x) <- features[,2]
#extract only the mean and the standard deviation for each measurement
required_features <- grepl("std|mean", features[,2])
required_measurements <- merged_x[ ,required_features]
#use descriptive activity names to name the activities in the dataset
merged_y$V2 <- factor(merged_y$V1, levels=c(1,2,3,4,5,6), labels=activity_labels$V2)
head(merged_y)
result <- cbind(merged_subject, merged_x, merged_y)
head(result)
head(result, n=1)
result <- cbind(merged_subject, merged_x, merged_y)
merged_subject
head(merged_subject)
names(merged_subject) <- "Subject_Number"
head(merged_subject)
head(merged_y)
names(merged_y) <- c("Activity_Num", "Activity_Type")
head(merged_y)
result <- cbind(merged_subject,merged_y, merged_x)
result[, lapply(mean), by=list(Subject_Number,Activity_Type)]
result[, lapply(mean), by=list(Subject_Number,Activity_Type)]
aggregate(result, by=list(subject = result$Subject_Number, activity=result$Activity_Type), mean)
warnings()
tidy <- aggregate(result, by=list(subject = result$Subject_Number, activity=result$Activity_Type), mean)
write.table(tidy, "tidyMeans.txt")
write.table(result, "tidy.txt", sep="\t")
head(merged_subject)
head(merged_y)
result <- cbind(merged_subject,merged_y$Activity_Type, merged_x)
result <- cbind(merged_subject,merged_y$Activity_Type, merged_x)
write.table(result, "tidy.txt", sep="\t")
result <- cbind(Subject = merged_subject,ActivityType = merged_y$Activity_Type, Data =merged_x)
write.table(result, "tidy.txt", sep="\t")
aggregate(result, by=list(subject = result$Subject_Number, activity=result$Activity_Type), mean)
aggregate(result, by=list(subject = result$Subject_Number, activity=result$ActivityType), mean)
head(merged_subject)
activities <- merged_y$Activity_Type
result <- cbind(Subject = merged_subject,ActivityType = activities, Data =merged_x)
head(merged_x,n=1)
write.table(result, "tidy.txt", sep="\t")
aggregate(result, by=list(subject = result$Subject_Number, activity=activities), mean)
result <- cbind(Subject = merged_subject,ActivityType = activities, Data =required_measurements)
write.table(result, "tidy.txt", sep="\t")
result[, lapply(mean), by=list(Subject,ActivityType)]
ddply(result, .(Subject, ActivityType), colMeans(result[,-c(1,2)]))
library(plyr)
ddply(result, .(Subject, ActivityType), colMeans(result[,-c(1,2)]))
ddply(result, .(Subject_Number, ActivityType), colMeans(result[,-c(1,2)]))
colMeans(c(1,2))
ddply(result, .(Subject_Number, ActivityType), fun=function(data) {colMeans(data[,-c(1,2)])})
tidy_with_means <- ddply(result, .(Subject_Number, ActivityType), fun=function(data) {colMeans(data[,-c(1,2)])})
head(tidy_with_means)
write.table(tidy_with_means, "tidy.txt", sep="\t")
tidy_with_means <- ddply(result, .(Subject_Number, ActivityType), .funct=function(data) {colMeans(data[,-c(1,2)])})
tidy_with_means <- ddply(result, .(Subject_Number, ActivityType), .funct=function(data) {colMeans(data[,-c(1,2)])})
dataset2 <- ddply(restult, .(Subject_Number,  ActivityType), .fun=function(x){ colMeans(x[,-c(1:2)]) })
dataset2 <- ddply(result, .(Subject_Number,  ActivityType), .fun=function(x){ colMeans(x[,-c(1:2)]) })
write.table(dataset2, "tidy.txt", sep="\t")
write.table(dataset2, "tidy.txt", sep="\t")
tidy_data <- ddply(result, .(Subject_Number,  ActivityType), .fun=function(x){ colMeans(x[,-c(1:2)]) })
paste(colnames(tidy_data)[-c(1:2)], "_mean", sep="")
paste(colnames("avg_", tidy_data)[-c(1,2)], , sep="")
paste(colnames("avg_", tidy_data)[-c(1:2)], , sep="")
paste("Sub", colnames(m2), sep = "_")
paste("avg_", colnames(tidy_data)[-c(1:2)], , sep="")
paste( "_mean",colnames(tidy_data)[-c(1:2)], sep="")
paste( "avg_",colnames(tidy_data)[-c(1:2)], sep="")
paste( "avg_",colnames(tidy_data)[-c(1:2)], sep="")
colnames(tidy_data)[-c(1:2)] <- paste( "avg_",colnames(tidy_data)[-c(1:2)], sep="")
library(plyr)
library(plyr)
write.table(tidy_data, "tidy.txt", sep="\t", header = TRUE )
write.table(tidy_data header = TRUE, "tidy.txt", sep="\t",  )
write.table(tidy_data, header = TRUE, "tidy.txt", sep="\t"  )
?write.table
write.table(tidy_data, row.names = TRUE, "tidy.txt", sep="\t"  )
t <- read.table("tidy.txt")
head(t)
